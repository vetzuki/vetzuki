# GetProspect: Lambda
resource "aws_lambda_function" "getProspectLambda" {
    filename = "getProspect/lambda.zip"
    function_name = "${var.getProspectLambdaName}"
    role = "${aws_iam_role.lambdaRole.arn}"
    handler = "lambda"
    runtime = "go1.x"
    source_code_hash = "${filebase64sha256("getProspect/lambda.zip")}"
    timeout = 10
    depends_on = [
      "aws_subnet.privateA",
      "aws_subnet.privateB"
    ]
    vpc_config {
      subnet_ids = [
        "${aws_subnet.privateA.id}",
        "${aws_subnet.privateB.id}"
      ]
      security_group_ids = ["{{ db_security_group[vetzuki_environment] }}"]
    }
    environment {
      variables = {
        LDAP_HOST = "{{ ldap[vetzuki_environment].host }}"
        BASE_DN = "{{ ldap[vetzuki_environment].base_dn }}"
        GROUPS_DN = "{{ ldap[vetzuki_environment].groups_dn }}"
        BIND_DN = "{{ ldap[vetzuki_environment].bind_dn }}"
        BIND_PASSWORD = "{{ ldap[vetzuki_environment].bind_password }}"
        VETZUKI_ENVIRONMENT = "{{ vetzuki_environment }}"
        REDIS_HOST = "{{ redis[vetzuki_environment].host }}"
        REDIS_PASSWORD = "{{ redis[vetzuki_environment].password }}"
        REDIS_DB = "{{ redis[vetzuki_environment].db }}"
        SSH_URL = "ssh.${var.vetzukiEnvironment}.vetzuki.com"
        DB_HOST = "db.${var.vetzukiEnvironment}.vetzuki.com"
        DB_PORT = "${var.db_port}"
        DB_USERNAME = "${var.db_user}"
        DB_PASSWORD = "${var.db_password}"
        DB_NAME = "${var.db_name}"
        ADMIN_WHITELIST = "{{ adminWhitelist | join(',') }}"

      }
    }
}

# GetProspects: Lambda
resource "aws_lambda_function" "getProspects" {
    filename = "getProspects/lambda.zip"
    function_name = "getProspects-${var.vetzukiEnvironment}"
    role = "${aws_iam_role.lambdaRole.arn}"
    handler = "lambda"
    runtime = "go1.x"
    source_code_hash = "${filebase64sha256("getProspects/lambda.zip")}"
    timeout = 10
    depends_on = [
      "aws_subnet.privateA",
      "aws_subnet.privateB"
    ]
    vpc_config {
      subnet_ids = [
        "${aws_subnet.privateA.id}",
        "${aws_subnet.privateB.id}"
      ]
      security_group_ids = ["{{ db_security_group[vetzuki_environment] }}"]
    }
    environment {
      variables = {
        LDAP_HOST = "{{ ldap[vetzuki_environment].host }}"
        BASE_DN = "{{ ldap[vetzuki_environment].base_dn }}"
        GROUPS_DN = "{{ ldap[vetzuki_environment].groups_dn }}"
        BIND_DN = "{{ ldap[vetzuki_environment].bind_dn }}"
        BIND_PASSWORD = "{{ ldap[vetzuki_environment].bind_password }}"
        VETZUKI_ENVIRONMENT = "{{ vetzuki_environment }}"
        REDIS_HOST = "{{ redis[vetzuki_environment].host }}"
        REDIS_PASSWORD = "{{ redis[vetzuki_environment].password }}"
        REDIS_DB = "{{ redis[vetzuki_environment].db }}"
        SSH_URL = "ssh.${var.vetzukiEnvironment}.vetzuki.com"
        DB_HOST = "db.${var.vetzukiEnvironment}.vetzuki.com"
        DB_PORT = "${var.db_port}"
        DB_USERNAME = "${var.db_user}"
        DB_PASSWORD = "${var.db_password}"
        DB_NAME = "${var.db_name}"
        ADMIN_WHITELIST = "{{ adminWhitelist | join(',') }}"
      }
    }
}

# CreateProspect: Lambda
resource "aws_lambda_function" "createProspect" {
    filename = "createProspect/lambda.zip"
    function_name = "createProspect-${var.vetzukiEnvironment}"
    role = "${aws_iam_role.lambdaRole.arn}"
    handler = "lambda"
    runtime = "go1.x"
    source_code_hash = "${filebase64sha256("createProspect/lambda.zip")}"
    timeout = 10
    depends_on = [
      "aws_subnet.privateA",
      "aws_subnet.privateB"
    ]
    vpc_config {
      subnet_ids = [
        "${aws_subnet.privateA.id}",
        "${aws_subnet.privateB.id}"
      ]
      security_group_ids = ["{{ db_security_group[vetzuki_environment] }}"]
    }
    environment {
      variables = {
        LDAP_HOST = "{{ ldap[vetzuki_environment].host }}"
        BASE_DN = "{{ ldap[vetzuki_environment].base_dn }}"
        GROUPS_DN = "{{ ldap[vetzuki_environment].groups_dn }}"
        BIND_DN = "{{ ldap[vetzuki_environment].bind_dn }}"
        BIND_PASSWORD = "{{ ldap[vetzuki_environment].bind_password }}"
        VETZUKI_ENVIRONMENT = "{{ vetzuki_environment }}"
        REDIS_HOST = "{{ redis[vetzuki_environment].host }}"
        REDIS_PASSWORD = "{{ redis[vetzuki_environment].password }}"
        REDIS_DB = "{{ redis[vetzuki_environment].db }}"
        SSH_URL = "ssh.${var.vetzukiEnvironment}.vetzuki.com"
        DB_HOST = "db.${var.vetzukiEnvironment}.vetzuki.com"
        DB_PORT = "${var.db_port}"
        DB_USERNAME = "${var.db_user}"
        DB_PASSWORD = "${var.db_password}"
        DB_NAME = "${var.db_name}"
        ADMIN_WHITELIST = "{{ adminWhitelist | join(',') }}"
      }
    }
}

# EmployerLogin: Lambda
resource "aws_lambda_function" "employerLogin" {
    filename = "employerLogin/lambda.zip"
    function_name = "employerLogin-${var.vetzukiEnvironment}"
    role = "${aws_iam_role.lambdaRole.arn}"
    handler = "lambda"
    runtime = "go1.x"
    source_code_hash = "${filebase64sha256("employerLogin/lambda.zip")}"
    timeout = 10
    depends_on = [
      "aws_subnet.privateA",
      "aws_subnet.privateB"
    ]
    vpc_config {
      subnet_ids = [
        "${aws_subnet.privateA.id}",
        "${aws_subnet.privateB.id}"
      ]
      security_group_ids = ["{{ db_security_group[vetzuki_environment] }}"]
    }
    environment {
      variables = {
        LDAP_HOST = "{{ ldap[vetzuki_environment].host }}"
        BASE_DN = "{{ ldap[vetzuki_environment].base_dn }}"
        GROUPS_DN = "{{ ldap[vetzuki_environment].groups_dn }}"
        BIND_DN = "{{ ldap[vetzuki_environment].bind_dn }}"
        BIND_PASSWORD = "{{ ldap[vetzuki_environment].bind_password }}"
        VETZUKI_ENVIRONMENT = "{{ vetzuki_environment }}"
        REDIS_HOST = "{{ redis[vetzuki_environment].host }}"
        REDIS_PASSWORD = "{{ redis[vetzuki_environment].password }}"
        REDIS_DB = "{{ redis[vetzuki_environment].db }}"
        SSH_URL = "ssh.${var.vetzukiEnvironment}.vetzuki.com"
        DB_HOST = "db.${var.vetzukiEnvironment}.vetzuki.com"
        DB_PORT = "${var.db_port}"
        DB_USERNAME = "${var.db_user}"
        DB_PASSWORD = "${var.db_password}"
        DB_NAME = "${var.db_name}"
        ADMIN_WHITELIST = "{{ adminWhitelist | join(',') }}"
      }
    }
}

# CreateScore: Lambda
resource "aws_lambda_function" "createScore" {
    filename = "createScore/lambda.zip"
    function_name = "createScore-${var.vetzukiEnvironment}"
    role = "${aws_iam_role.lambdaRole.arn}"
    handler = "lambda"
    runtime = "go1.x"
    source_code_hash = "${filebase64sha256("createScore/lambda.zip")}"
    timeout = 10
    depends_on = [
      "aws_subnet.privateA",
      "aws_subnet.privateB"
    ]
    vpc_config {
      subnet_ids = [
        "${aws_subnet.privateA.id}",
        "${aws_subnet.privateB.id}"
      ]
      security_group_ids = ["{{ db_security_group[vetzuki_environment] }}"]
    }
    environment {
      variables = {
        LDAP_HOST = "{{ ldap[vetzuki_environment].host }}"
        BASE_DN = "{{ ldap[vetzuki_environment].base_dn }}"
        GROUPS_DN = "{{ ldap[vetzuki_environment].groups_dn }}"
        BIND_DN = "{{ ldap[vetzuki_environment].bind_dn }}"
        BIND_PASSWORD = "{{ ldap[vetzuki_environment].bind_password }}"
        VETZUKI_ENVIRONMENT = "{{ vetzuki_environment }}"
        REDIS_HOST = "{{ redis[vetzuki_environment].host }}"
        REDIS_PASSWORD = "{{ redis[vetzuki_environment].password }}"
        REDIS_DB = "{{ redis[vetzuki_environment].db }}"
        SSH_URL = "ssh.${var.vetzukiEnvironment}.vetzuki.com"
        DB_HOST = "db.${var.vetzukiEnvironment}.vetzuki.com"
        DB_PORT = "${var.db_port}"
        DB_USERNAME = "${var.db_user}"
        DB_PASSWORD = "${var.db_password}"
        DB_NAME = "${var.db_name}"
        ADMIN_WHITELIST = "{{ adminWhitelist | join(',') }}"
        TEESH_API_KEY = "{{ teesh.apiKey }}"
      }
    }
}

# GetProspectScore: Lambda
resource "aws_lambda_function" "getProspectScore" {
    filename = "getProspectScore/lambda.zip"
    function_name = "getProspectScore-${var.vetzukiEnvironment}"
    role = "${aws_iam_role.lambdaRole.arn}"
    handler = "lambda"
    runtime = "go1.x"
    source_code_hash = "${filebase64sha256("getProspectScore/lambda.zip")}"
    timeout = 10
    depends_on = [
      "aws_subnet.privateA",
      "aws_subnet.privateB"
    ]
    vpc_config {
      subnet_ids = [
        "${aws_subnet.privateA.id}",
        "${aws_subnet.privateB.id}"
      ]
      security_group_ids = ["{{ db_security_group[vetzuki_environment] }}"]
    }
    environment {
      variables = {
        LDAP_HOST = "{{ ldap[vetzuki_environment].host }}"
        BASE_DN = "{{ ldap[vetzuki_environment].base_dn }}"
        GROUPS_DN = "{{ ldap[vetzuki_environment].groups_dn }}"
        BIND_DN = "{{ ldap[vetzuki_environment].bind_dn }}"
        BIND_PASSWORD = "{{ ldap[vetzuki_environment].bind_password }}"
        VETZUKI_ENVIRONMENT = "{{ vetzuki_environment }}"
        REDIS_HOST = "{{ redis[vetzuki_environment].host }}"
        REDIS_PASSWORD = "{{ redis[vetzuki_environment].password }}"
        REDIS_DB = "{{ redis[vetzuki_environment].db }}"
        SSH_URL = "ssh.${var.vetzukiEnvironment}.vetzuki.com"
        DB_HOST = "db.${var.vetzukiEnvironment}.vetzuki.com"
        DB_PORT = "${var.db_port}"
        DB_USERNAME = "${var.db_user}"
        DB_PASSWORD = "${var.db_password}"
        DB_NAME = "${var.db_name}"
        ADMIN_WHITELIST = "{{ adminWhitelist | join(',') }}"
      }
    }
}

# GetProspectScores: Lambda
resource "aws_lambda_function" "getProspectScores" {
    filename = "getProspectScores/lambda.zip"
    function_name = "getProspectScores-${var.vetzukiEnvironment}"
    role = "${aws_iam_role.lambdaRole.arn}"
    handler = "lambda"
    runtime = "go1.x"
    source_code_hash = "${filebase64sha256("getProspectScores/lambda.zip")}"
    timeout = 10
    depends_on = [
      "aws_subnet.privateA",
      "aws_subnet.privateB"
    ]
    vpc_config {
      subnet_ids = [
        "${aws_subnet.privateA.id}",
        "${aws_subnet.privateB.id}"
      ]
      security_group_ids = ["{{ db_security_group[vetzuki_environment] }}"]
    }
    environment {
      variables = {
        LDAP_HOST = "{{ ldap[vetzuki_environment].host }}"
        BASE_DN = "{{ ldap[vetzuki_environment].base_dn }}"
        GROUPS_DN = "{{ ldap[vetzuki_environment].groups_dn }}"
        BIND_DN = "{{ ldap[vetzuki_environment].bind_dn }}"
        BIND_PASSWORD = "{{ ldap[vetzuki_environment].bind_password }}"
        VETZUKI_ENVIRONMENT = "{{ vetzuki_environment }}"
        REDIS_HOST = "{{ redis[vetzuki_environment].host }}"
        REDIS_PASSWORD = "{{ redis[vetzuki_environment].password }}"
        REDIS_DB = "{{ redis[vetzuki_environment].db }}"
        SSH_URL = "ssh.${var.vetzukiEnvironment}.vetzuki.com"
        DB_HOST = "db.${var.vetzukiEnvironment}.vetzuki.com"
        DB_PORT = "${var.db_port}"
        DB_USERNAME = "${var.db_user}"
        DB_PASSWORD = "${var.db_password}"
        DB_NAME = "${var.db_name}"
        ADMIN_WHITELIST = "{{ adminWhitelist | join(',') }}"
      }
    }
}

# UpdateExamState: Lambda
resource "aws_lambda_function" "updateExamState" {
    filename = "updateExamState/lambda.zip"
    function_name = "updateExamState-${var.vetzukiEnvironment}"
    role = "${aws_iam_role.lambdaRole.arn}"
    handler = "lambda"
    runtime = "go1.x"
    source_code_hash = "${filebase64sha256("updateExamState/lambda.zip")}"
    timeout = 10
    depends_on = [
      "aws_subnet.privateA",
      "aws_subnet.privateB"
    ]
    vpc_config {
      subnet_ids = [
        "${aws_subnet.privateA.id}",
        "${aws_subnet.privateB.id}"
      ]
      security_group_ids = ["{{ db_security_group[vetzuki_environment] }}"]
    }
    environment {
      variables = {
        VETZUKI_ENVIRONMENT = "{{ vetzuki_environment }}"
        DB_HOST = "db.${var.vetzukiEnvironment}.vetzuki.com"
        DB_PORT = "${var.db_port}"
        DB_USERNAME = "${var.db_user}"
        DB_PASSWORD = "${var.db_password}"
        DB_NAME = "${var.db_name}"
        TEESH_API_KEY = "{{ teesh.apiKey }}"
      }
    }
}

# CreateProspect : Allow APIGateway to execute CreateProspect Lambda
resource "aws_lambda_permission" "createProspect" {
    statement_id = "AllowExecutionFromAPIGateway"
    action = "lambda:InvokeFunction"
    function_name = "${aws_lambda_function.createProspect.function_name}"
    principal = "apigateway.amazonaws.com"
}

# EmployerLogin : Allow APIGateway to execute EmployerLogin Lambda
resource "aws_lambda_permission" "employerLogin" {
    statement_id = "AllowExecutionFromAPIGateway"
    action = "lambda:InvokeFunction"
    function_name = "${aws_lambda_function.employerLogin.function_name}"
    principal = "apigateway.amazonaws.com"
}

# GetProspect: Allow APIGateway to invoke Lambda
resource "aws_lambda_permission" "getProspectLambdaPermission" {
    statement_id = "AllowExecutionFromAPIGateway"
    action = "lambda:InvokeFunction"
    function_name = "${aws_lambda_function.getProspectLambda.function_name}"
    principal = "apigateway.amazonaws.com"
}

# GetProspects: Allow APIGateway to invoke Lambda
resource "aws_lambda_permission" "getProspectsLambdaPermission" {
    statement_id = "AllowExecutionFromAPIGateway"
    action = "lambda:InvokeFunction"
    function_name = "${aws_lambda_function.getProspects.function_name}"
    principal = "apigateway.amazonaws.com"
}

# GetProspectScore: Allow APIGateway to invoke Lambda
resource "aws_lambda_permission" "getProspectScore" {
    statement_id = "AllowExecutionFromAPIGateway"
    action = "lambda:InvokeFunction"
    function_name = "${aws_lambda_function.getProspectScore.function_name}"
    principal = "apigateway.amazonaws.com"
}

# GetProspectScores: Allow APIGateway to invoke Lambda
resource "aws_lambda_permission" "getProspectScores" {
    statement_id = "AllowExecutionFromAPIGateway"
    action = "lambda:InvokeFunction"
    function_name = "${aws_lambda_function.getProspectScores.function_name}"
    principal = "apigateway.amazonaws.com"
}

# UpdateExamState: Allow APIGateway to invoke Lambda
resource "aws_lambda_permission" "updateExamState" {
    statement_id = "AllowExecutionFromAPIGateway"
    action = "lambda:InvokeFunction"
    function_name = "${aws_lambda_function.updateExamState.function_name}"
    principal = "apigateway.amazonaws.com"
}

# CreateScoreResource: Allow APIGateway to invoke Lambda
resource "aws_lambda_permission" "createScore" {
    statement_id = "AllowExecutionFromAPIGateway"
    action = "lambda:InvokeFunction"
    function_name = "${aws_lambda_function.createScore.function_name}"
    principal = "apigateway.amazonaws.com"
}