#!/bin/bash

# APP_ROOT : Base directory for prospect configurations
# EXAM_CONTAINER_IP : IP of the exam container
# bridgeName : Bridge hosting the prospect environment
# configRoot : Root of configuration data for the prospect environment
# examImage : Version of the exam image to run
# examContainerName : Exam container name
# proctorImage : Version of the proctor image to run
# proctorContainerName : Proctor container name
# proctorPublic/PrivateKey : Key pair the proctor uses to connect to the exam container
# prospectID : PAM shell USER
# prospectPublic/PrivateKey : Key pair the host uses to connect to the exam container

# API configuration
APP_ROOT=/vetZuki
API_KEY={{ teesh.api_key }}
API_URL=https://www.{{ vetzuki_environment }}.vetzuki.com/api/exams/$USER
SCORING_URL=https://www.{{ vetzuki_environment }}.vetzuki.com/api/scores
ACTIVE={{ teesh.state.active }}
COMPLETED={{ teesh.state.completed }}

# Vetzuki configuration
prospectID=$USER
configRoot=$APP_ROOT/$prospectID
vetzukiLog=$configRoot/vetzuki.log
examLog=$configRoot/exam.log
examImage={{ exam.image }}:{{ exam.version }}
proctorImage={{ proctor.image }}:{{ proctor.version }}
combinedPublicKeys=authorized_keys
vetzukiAPI=https://www.{{ vetzuki_environment }}.vetzuki.com/api
vetzukiUI=https://www.{{ vetzuki_environment }}.vetzuki.com/
# Key configuration
proctorPrivateKey=proctor_rsa_$prospectID
proctorPublicKey=$proctorPrivateKey.pub
prospectPrivateKey=prospect_rsa_$prospectID
prospectPublicKey=$prospectPrivateKey.pub
# Container name configuration
examContainerName=exam_$prospectID
proctorContainerName=proctor_$prospectID

# Bridge configuration
# TODO: Use IP and port assigner
bridgeName=prospect_$prospectID
bridgeNetwork=10.0.1.0/24
bridgeGateway=10.0.1.1
proctorContainerIP=10.0.1.222
examContainerIP=10.0.1.2
examContainerSSHPort=2022
assignmentIP=10.0.1.5/24
prospectIP=10.0.1.5

set -e
# Kill any existing containers and networks
if [[ -n $(docker ps --filter "name=$examContainerName" | grep -v CONTAINER) ]] ; then
  docker kill $examContainerName >> $vetzukiLog 2>&1
fi
if [[ -n $(docker ps -a --filter "name=$examContainerName" | grep -v CONTAINER) ]] ; then
  docker rm $examContainerName >> $vetzukiLog 2>&1
fi

if [[ -n $(docker ps --filter "name=$proctorContainerName" | grep -v CONTAINER) ]] ; then
  docker kill $proctorContainerName >> $vetzukiLog 2>&1
fi
if [[ -n $(docker ps -a --filter "name=$proctorContainerName" | grep -v CONTAINER) ]] ; then
  docker rm $proctorContainerName >> $vetzukiLog 2>&1
fi
if [[ $(docker network ls | grep $bridgeName) ]] ; then
  docker network rm $bridgeName >> $vetzukiLog 2>&1
fi
# Authenticate to ECR
#   This utilizes an IAM ECR ReadOnly role assigned to an EC2 instance
# Generates a log message "Login succeeded" to stdout which is nice to 
# help the prospect
$(aws ecr get-login --no-include-email --region us-west-2) 2> /dev/null

# Create prospect configuration root
[ -d $configRoot ] && rm -rf $configRoot > /dev/null 2>&1
mkdir -p $configRoot > /dev/null 2>&1
echo "Spinning up containers for $USER" >> $vetzukiLog
cd $configRoot >> $vetzukiLog 2>&1

# Create the POC assigment
echo "Assign the IP $assignmentIP to the eth0 interface" > assignment
echo "---" >> assignment
# Create prospect key pair
ssh-keygen -b 2048 -t rsa -f $prospectPrivateKey -q -N "" >> $vetzukiLog 2>&1
# Create proctor key pair
ssh-keygen -b 2048 -t rsa -f $proctorPrivateKey -q -N "" >> $vetzukiLog 2>&1

# Authorize the prospect and proctor to the exam container
cat $prospectPublicKey > $combinedPublicKeys
cat $proctorPublicKey >> $combinedPublicKeys

chmod 0600 $prospectPrivateKey >> $vetzukiLog 2>&1
chmod 0600 $proctorPrivateKey >> $vetzukiLog 2>&1
chmod 0600 $combinedPublicKeys >> $vetzukiLog 2>&1
# Own all resources as root
/usr/local/bin/own_config $configRoot >> $vetzukiLog 2>&1

# Create bridge for prospect containers
echo "Creating bridge network $bridgeName" >> $vetzukiLog 2>&1

docker network create \
    -d bridge \
    --subnet $bridgeNetwork \
    --gateway $bridgeGateway \
    $bridgeName >> $vetzukiLog 2>&1

[ -f $configRoot/$combinedPublicKeys ] && echo "Authorized keys are ready" >> $vetzukiLog 2>&1
[ -f $configRoot/assignment ] && echo "Assignment is ready" >> $vetzukiLog 2>&1

# Create the exam container
echo "Creating prospect exam $examContainerName using $examImage" >> $vetzukiLog 2>&1
# Add NET_ADMIN capability to allow the assignment of IP addresses
docker run -d \
    --name $examContainerName \
    --volume $configRoot/$combinedPublicKeys:/root/.ssh/authorized_keys:ro \
    --volume $configRoot/assignment:/etc/motd:ro \
    --network $bridgeName \
    --ip $examContainerIP \
    --cap-add=NET_ADMIN \
    --publish 127.0.0.1:$examContainerSSHPort:22/tcp \
    $examImage >> $vetzukiLog 2>&1

echo -e "Launched prospect exam $examContainerName using $examImage\n" >> $vetzukiLog 2>&1
# Create the proctor container
echo "Create proctor $proctorContainerName using $proctorImage" >> $vetzukiLog 2>&1

docker run -d \
    --name $proctorContainerName \
    --volume $configRoot/$proctorPrivateKey:/app/id_rsa:ro \
    --volume $configRoot/$proctorPrivateKey:/app/proctor.id_rsa:ro \
    -e EXAM_CONTAINER_IP=$examContainerIP \
    -e ASSIGNMENT_IP=$assignmentIP \
    -e PROSPECT_IP=$prospectIP \
    -e PROSPECT_ID=$prospectID \
    -e PROSPECT_VIF=eth0 \
    -e VETZUKI_API=$vetzukiAPI \
    -e VETZUKI_UI=${vetzukiUI}p \
    --network $bridgeName \
    --ip $proctorContainerIP \
    $proctorImage >> $vetzukiLog 2>&1

echo -e "Launched proctor $proctorContainerName using $proctorImage\n" >> $vetzukiLog 2>&1
logRoot=$configRoot
logFile=$logRoot/exam.log
# Set screening as active
echo "Marking $USER screening state as Active at $API_URL" >> $vetzukiLog 2>&1
curl -X PUT -H "Authorization: $API_KEY" "$API_URL" -d "{\"screeningState\": $ACTIVE}" >> $vetzukiLog 2>&1
# Connect the Prospect to their exam container
echo "Tunneling $prospect to their exam container 127.0.0.1:$examContainerSSHPort using $prospectPrivateKey" >> $vetzukiLog 2>&1

# Perhaps the grep isn't a very good idea. The intent is to not show that the session exitted

ssh \
    -o "StrictHostKeyChecking=no" \
    -o "LogLevel=QUIET" \
    -q \
    -p $examContainerSSHPort \
    -i $prospectPrivateKey \
    root@127.0.0.1 \
    | tee >(ts "%Y-%m-%d %H:%M:%.S" > $logFile)

# Set screening state as completed
echo "Marking $USER screening state as Completed at $API_URL" >> $vetzukiLog 2>&1
curl -X PUT \
  -H "Authorization: $API_KEY" \
  -H "Content-Type: application/json" \
  "$API_URL" \
  -d "{\"screeningState\": $COMPLETED}" >> $vetzukiLog 2>&1

# Send data to scoring engine. Do not wrap lines in base64 encoding
curl -X POST \
  -H "Authorization: $API_KEY" \
  -H "Content-Type: application/json" \
  "$SCORING_URL" \
  -d "{\"prospectURLID\":\"$USER\", \
       \"examLog\": \"$(cat $logFile | base64 -w 0)\", \
       \"vetzukiLog\": \"$(cat $vetzukiLog | base64 -w 0)\"}" >> $vetzukiLog 2>&1

# Allow command failures
set +e
# Clean-up the environment when things the exam container exits
if [[ -n $(docker ps --filter "name=$examContainerName" | grep -v CONTAINER) ]] ; then
  docker kill $examContainerName >> $vetzukiLog 2>&1
  docker rm $examContainerName >> $vetzukiLog 2>&1
fi
if [[ -n $(docker ps --filter "name=$proctorContainerName" | grep -v CONTAINER) ]] ; then
  docker kill $proctorContainerName >> $vetzukiLog 2>&1
  docker rm $proctorContainerName >> $vetzukiLog 2>&1
fi
docker network rm $bridgeName >> $vetzukiLog 2>&1

